<#@ include file="../Include.ttinclude" #>// <copyright file="InnerProduct.cs" company="Emik">
// Copyright (c) Emik. This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
// </copyright>
namespace Emik.Unions.Tagged;
#pragma warning disable IDE0021, RCS1036
<#
    for (var i = AndMin; i <= AndMax; i++)
    {
#>
<#
        if (i > Net35Limit)
        {
#>
#if !NET35
<#
        }
#>
/// <summary>
/// Defines an internal disjoint union for storing 1 of <#= i #> different values.
/// Instances of this type are exposed to the consumer as an interface.
/// </summary>
<#
        for (var j = 1; j <= i; j++)
        {
#>
/// <typeparam name="T<#= j #>">The <#= Word(j) #> type of the disjoint union.</typeparam>
<#
        }
#>
sealed record InnerProduct<<#= Generic(i) #>> : IProduct<<#= Generic(i) #>>
{
    static readonly PropertyInfo[] s_properties = typeof(InnerProduct<<#= Generic(i) #>>)
       .GetProperties(BindingFlags.Instance | BindingFlags.Public);

    /// <summary>Initializes a new instance of the <see cref="InnerProduct{<#= Generic(i) #>}"/> class.</summary>
<#
        for (var j = 1; j <= i; j++)
        {
#>
    /// <param name="<#= WordCamel(j) #>">The <#= Word(j) #> parameter to pass in the union.</param>
<#
        }
#>
    internal InnerProduct(
<#
        for (var j = 1; j <= i; j++)
        {
#>
        T<#= j #> <#= WordCamel(j) #><#
            if (j != i)
            {
#>,<#
            }
            else
            {
#>)<#
            }
#>

<#
        }
#>
    {
<#
        for (var j = 1; j <= i; j++)
        {
#>
        <#= WordPascal(j) #> = <#= WordCamel(j) #>;
<#
        }
#>
    }

    /// <inheritdoc/>
    [Pure]
    public object? this[PropertyInfo name] => this.Index(name.Name).Value;

    /// <inheritdoc/>
    [Pure]
    public KeyValuePair<PropertyInfo, object?> this[int index] => this.Index(index);

    /// <inheritdoc/>
    [Pure]
    public KeyValuePair<PropertyInfo, object?> this[[Localizable(false), LocalizationRequired(false)] string name] =>
        this.Index(name);
<#
        for (var j = 1; j <= i; j++)
        {
#>

    /// <inheritdoc/>
    [Pure]
    public T<#= j #> <#= WordPascal(j) #> { get; }
<#
        }
#>

    /// <inheritdoc/>
    [Pure]
    public
#if NETFRAMEWORK && !NET40_OR_GREATER
    IList
#else
    IReadOnlyList
#endif
        <PropertyInfo> Properties =>
        s_properties
#if NETFRAMEWORK && !NET40_OR_GREATER
           .ToList();
#else
           .ToReadOnly();
#endif

    /// <inheritdoc />
    public override string ToString() => $"{nameof(Product)} {{ <#
        for (var j = 1; j <= i; j++)
        {
#>
{<#= WordPascal(j) #>}<#
            if (j != i)
            {
#>, <#
            }
#>
<#
        }
#> }}";

    /// <inheritdoc/>
    [LinqTunnel, Pure]
    public IEnumerator<KeyValuePair<PropertyInfo, object?>> Enumeration()
    {
<#
        for (var k = 1; k <= i; k++)
        {
#>
        yield return new(s_properties[<#= k - 1 #>], <#= WordPascal(k) #>);
<#
        }
#>
    }
}

<#
        if (i > Net35Limit)
        {
#>
#endif
<#
        }
#><#
    }
#>
