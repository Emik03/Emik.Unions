<#@ include file="../Include.ttinclude" #><#@ import namespace="System.Collections.Generic" #>// <copyright file="Either.Overloads.cs" company="Emik">
// Copyright (c) Emik. This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
// </copyright>
#pragma warning disable CA1000, CA1033
namespace Emik.Unions.Disjoints;

<#
    for (var i = OrMin; i <= OrMax; i++)
    {
#>
<#
        if (i > Net35Limit)
        {
#>
#if !NET35
<#
        }
#>
/// <summary>Defines a disjoint union with implicit conversions, for parameter signatures.</summary>
<#
        for (var j = 1; j <= i; j++)
        {
#>
/// <typeparam name="T<#= j #>">The <#= Word(j) #> type of the disjoint union.</typeparam>
<#
        }
#>
<#
        for (var j = 1; j <= i; j++)
        {
#>
/// <param name="<#= WordPascal(j) #>">The <#= Word(j) #> value of the disjoint union.</param>
<#
        }
#>
public sealed record Overload<<#= Generic(i) #>>(<#
        for (var j = 1; j <= i; j++)
        {
#>T<#= j #>? <#= WordPascal(j) #><#
            if (j != i)
            {
#>, <#
            }
#><#
        }
#>)
    : Either<<#= Generic(i) #>, Overload<<#= Generic(i) #>>>
<#
        for (var j = 1; j <= i; j++)
        {
#>
    where T<#= j #> : notnull
<#
        }
#>
{
<#
        for (var j = 1; j <= i; j++)
        {
#>
    /// <inheritdoc cref="Either{<#= Generic(i) #>, TType}.New(T<#= j #>)" />
    public static implicit operator Overload<<#= Generic(i) #>>(T<#= j #> <#= WordCamel(j) #>) => New(<#= WordCamel(j) #>);

    /// <inheritdoc cref="IEither{<#= Generic(i) #>}.<#= WordPascal(j) #>" />
    public static explicit operator T<#= j #>?(Overload<<#= Generic(i) #>> <#= WordCamel(j) #>) => ((IEither<<#= Generic(i) #>>)<#= WordCamel(j) #>).<#= WordPascal(j) #>;

<#
        }
#>
}

<#
        if (i > Net35Limit)
        {
#>
#endif
<#
        }
#>
<#
    }
#>
