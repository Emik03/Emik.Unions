<#@ include file="../Include.ttinclude" #>// <copyright file="InnerEither.cs" company="Emik">
// Copyright (c) Emik. This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
// </copyright>
namespace Emik.Unions.Disjoints;

<#
    for (var i = OrMin; i <= OrMax; i++)
    {
#>
<#
        if (i > Net35Limit)
        {
#>
#if !NET35
<#
        }
#>
/// <summary>
/// Defines an internal disjoint union for storing 1 of <#= i #> different values.
/// Instances of this type are exposed to the consumer as an interface.
/// </summary>
<#
        for (var j = 1; j <= i; j++)
        {
#>
/// <typeparam name="T<#= j #>">The <#= Word(j) #> type of the disjoint union.</typeparam>
<#
        }
#>
sealed record InnerEither<<#= Generic(i) #>> : IEither<<#= Generic(i) #>>
{
    static readonly PropertyInfo[] s_properties =
        typeof(InnerEither<<#= Generic(i) #>>)
           .GetProperties(BindingFlags.Instance | BindingFlags.Public);

<#
        for (var j = 1; j <= i; j++)
        {
#>
    /// <summary>Initializes a new instance of the <see cref="InnerEither{<#= Generic(i) #>}"/> class.</summary>
    /// <param name="<#= WordCamel(j) #>">
    /// The <typeparamref name="T<#= j #>"/> value to assign to the disjoint union.
    /// </param>
    internal InnerEither(T<#= j #> <#= WordCamel(j) #>)
    {
        Index = <#= j - 1 #>;
        <#= WordPascal(j) #> = <#= WordCamel(j) #>;
    }

    /// <inheritdoc/>
    [Pure]
    public T<#= j #>? <#= WordPascal(j) #> { get; }

<#
        }
#>
    /// <inheritdoc/>
    [Pure]
    public KeyValuePair<PropertyInfo, object?> this[int index] => this.Index(index);

    /// <inheritdoc/>
    [Pure, ValueRange(0, <#= i - 1 #>)]
    public int Index { get; }

    /// <inheritdoc/>
    [Pure]
    public object? Value => this[Index].Value;

    /// <inheritdoc/>
    [Pure]
    public IReadOnlyList<PropertyInfo> Properties => s_properties.AsRead();

    /// <inheritdoc/>
    [Pure]
    public override string ToString() =>
        @$"{nameof(Either)}[{Index}] {{ {Value} }}";
}

<#
        if (i > Net35Limit)
        {
#>
#endif
<#
        }
#>
<#
    }
#>
