// SPDX-License-Identifier: MPL-2.0
<#@ include file="../Include.ttinclude" #>
namespace Emik.Unions.Disjoints;
#pragma warning disable RCS1036
<#
    for (var i = OrMin; i <= OrMax; i++)
    {
#>
<#
        if (i > Net35Limit)
        {
#>
#if !NETFRAMEWORK || NET40_OR_GREATER
<#
        }
#>
/// <summary>
/// Defines an internal disjoint union for storing 1 of <#= i #> different values.
/// Instances of this type are exposed to the consumer as an interface.
/// </summary>
<#
        for (var j = 1; j <= i; j++)
        {
#>
/// <typeparam name="T<#= j #>">The <#= Word(j) #> type of the disjoint union.</typeparam>
<#
        }
#>
sealed record InnerEither<<#= Generic(i) #>> :
#if NET7_0_OR_GREATER
    IEqualityOperators<InnerEither<<#= Generic(i) #>>, InnerEither<<#= Generic(i) #>>, bool>,
#endif
    IEither<<#= Generic(i) #>><#
        for (var j = 1; j <= i; j++)
        {
#>
        where T<#= j #> : notnull
<#
        }
#>
{
    static readonly PropertyInfo[] s_properties =
        typeof(InnerEither<<#= Generic(i) #>>)
           .GetProperties(BindingFlags.Instance | BindingFlags.Public);

<#
        for (var j = 1; j <= i; j++)
        {
#>
    /// <summary>Initializes a new instance of the <see cref="InnerEither{<#= Generic(i) #>}"/> class.</summary>
    /// <param name="<#= WordCamel(j) #>">
    /// The <typeparamref name="T<#= j #>"/> value to assign to the disjoint union.
    /// </param>
    internal InnerEither(T<#= j #> <#= WordCamel(j) #>)
    {
        Index = <#= j - 1 #>;
        <#= WordPascal(j) #> = <#= WordCamel(j) #>;
    }

    /// <inheritdoc/>
    [Pure]
    public T<#= j #>? <#= WordPascal(j) #> { get; }

<#
        }
#>
    /// <inheritdoc/>
    [Pure]
    public KeyValuePair<PropertyInfo, object?> this[int index] => this.Index(index);

    /// <inheritdoc/>
    [Pure, ValueRange(0, <#= i - 1 #>)]
    public int Index { get; }

    /// <inheritdoc/>
    [Pure]
    public object? Value => this[Index].Value;

    /// <inheritdoc/>
    [Pure]
    public
#if NETFRAMEWORK && !NET45_OR_GREATER
    IList
#else
    IReadOnlyList
#endif
        <PropertyInfo> Properties =>
        s_properties
#if NETFRAMEWORK && !NET45_OR_GREATER
           .ToList();
#else
           .ToReadOnly();
#endif

    /// <inheritdoc/>
    [Pure]
    public override string ToString() => $"{nameof(Either)}[{Index}] {{ {Value} }}";
}

<#
        if (i > Net35Limit)
        {
#>
#endif
<#
        }
#>
<#
    }
#>
