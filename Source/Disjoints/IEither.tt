// SPDX-License-Identifier: MPL-2.0
<#@ include file="../Include.ttinclude" #>
namespace Emik.Unions.Disjoints;
#pragma warning disable RCS1036, SA1508
/// <summary>An interface for everything that disjoint union types share in common with.</summary>
public interface IEither : IProperties
{
    /// <summary>Gets the index where the value is contained.</summary>
    [Pure, ValueRange(-1, int.MaxValue)]
    int Index { get; }

    /// <summary>Gets the value.</summary>
    [Pure]
    object? Value { get; }
}

<#
    for (var i = OrMin; i <= OrMax; i++)
    {
#>
<#
        if (i > Net35Limit)
        {
#>
#if !NETFRAMEWORK || NET40_OR_GREATER
<#
        }
#>
/// <summary>Defines an interface for disjoint union of size <#= i #>.</summary>
<#
        for (var j = 1; j <= i; j++)
        {
#>
/// <typeparam name="T<#= j #>">The <#= Word(j) #> type of the disjoint union.</typeparam>
<#
        }
#>
public interface IEither<<#= GenericCovariant(i) #>> : IEither
{
<#
        for (var j = 1; j <= i; j++)
        {
#>
    /// <summary>Gets the <typeparamref name="T<#= j #>"/> <#= Word(j) #> value of the disjoint union.</summary>
    [Pure]
    T<#= j #>? <#= WordPascal(j) #> { get; }

<#
        }
#>
}

<#
        if (i > Net35Limit)
        {
#>
#endif
<#
        }
#>
<#
    }
#>
