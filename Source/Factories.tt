// SPDX-License-Identifier: MPL-2.0
<#@ include file="Include.ttinclude" #>
namespace Emik.Unions;
#pragma warning disable RCS1036, SA1508
/// <summary>Generates factories for types.</summary>
public static class Factories
{
<#
    for (var i = AndMin; i <= OrMax; i++)
    {
#>
<#
        if (i > Net35Limit)
        {
#>
#if !NET35
<#
        }
#>
    /// <summary>Creates a factory from a given type.</summary>
<#
        for (var j = 1; j <= i; j++)
        {
#>
    /// <typeparam name="T<#= j #>">The <#= Word(j) #> type of <typeparamref name="TType"/>.</typeparam>
<#
        }
#>
    /// <typeparam name="TType">The type to create the factory from.</typeparam>
    /// <exception cref="MissingMemberException">
    /// There is no constructor on <typeparamref name="TType"/> that matches the signature of the return factory.
    /// </exception>
    /// <returns>A generated factory.</returns>
    [MustUseReturnValue]
    public static Result<Func<<#= Generic(i) #>, TType>, MissingMethodException> From<<#= Generic(i) #>, TType>()
        where TType : notnull
    {
        var info = typeof(TType).GetConstructor(new[] { <#= TypeOf(i) #> });

        if (info is null)
            return new MissingMethodException(
                typeof(TType).Name,
                ".ctor(<#= Generic(i) #>)"
            );

<#
        for (var j = 1; j <= i; j++)
        {
#>
        var ex<#= WordPascal(j) #> = Expression.Parameter(typeof(T<#= j #>), "<#= WordCamel(j) #>");
<#
        }
#>

        var exNew = Expression.New(
                info,
<#
        for (var j = 1; j <= i; j++)
        {
#>
                ex<#= WordPascal(j) #><#
            if (j != i)
            {
#>,<#
            }
            else
            {
#>)<#
            }
#>

<#
        }
#>
        ;

        return Expression
           .Lambda<Func<<#= Generic(i) #>, TType>>(
                exNew,
<#
        for (var j = 1; j <= i; j++)
        {
#>
                ex<#= WordPascal(j) #><#
            if (j != i)
            {
#>,<#
            }
#>

<#
        }
#>
           )
          .Compile();
    }

<#
        if (i > Net35Limit)
        {
#>
#endif
<#
        }
#>
<#
    }
#>
}
